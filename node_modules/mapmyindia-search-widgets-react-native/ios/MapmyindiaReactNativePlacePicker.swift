//
//  MapmyindiaReactNativePlacePicker.swift
//  react-native-mapmyindia-react-native-place-picker
//
//  Created by ceinfo on 27/01/21.
//

import Foundation
import MapmyIndiaUIWidgets
import MapmyIndiaMaps
@objc(MapmyindiaReactNativePlacePicker)
class MapmyindiaReactNativePlacePicker: NSObject , MapmyIndiaAutocompleteViewControllerDelegate{
    
    private var  resolver: RCTPromiseResolveBlock?
    private var  rejecter: RCTPromiseRejectBlock?
    
    func didAutocomplete(viewController: MapmyIndiaAutocompleteViewController, withSuggestion suggestion: MapmyIndiaSearchPrediction) {
        
    }
    
    //required for exporting constants
    @objc
    static func requiresMainQueueSetup() -> Bool {
      return true
    }
    
    //exporting constants
        @objc func constantsToExport() -> NSObject {
            return [
                
                //PlaceOptions

                   //Pods
                "POD_SUB_LOCALITY_KEY" : MMIPodTypeIdentifier.sublocality,
                "POD_LOCALITY_KEY": MMIPodTypeIdentifier.locality,
                "POD_CITY_KEY" : MMIPodTypeIdentifier.city,
                "POD_VILLAGE_KEY" : MMIPodTypeIdentifier.village,
                "POD_SUB_DISTRICT_KEY":MMIPodTypeIdentifier.subdistrict,
                "POD_DISTRICT_KEY": MMIPodTypeIdentifier.district,
                "POD_STATE_KEY" : MMIPodTypeIdentifier.state,
                "POD_SUB_SUB_LOCALITY_KEY": MMIPodTypeIdentifier.subSubLocality,
                
                //attributionHorizontalAlignment
                "GRAVITY_LEFT_KEY": MapmyIndiaHorizontalContentAlignment.left.rawValue,
                "GRAVITY_CENTER_KEY": MapmyIndiaHorizontalContentAlignment.center.rawValue,
                "GRAVITY_RIGHT_KEY": MapmyIndiaHorizontalContentAlignment.right.rawValue,

                //attributionVerticalAlignment
                "GRAVITY_TOP_KEY": MapmyIndiaVerticalPlacement.before.rawValue,
                "GRAVITY_BOTTOM_KEY":MapmyIndiaVerticalPlacement.after.rawValue,

                   //logoSize
                "SIZE_SMALL_KEY": MapmyIndiaContentSize.small.rawValue,
                "SIZE_MEDIUM_KEY":MapmyIndiaContentSize.medium.rawValue,
                "SIZE_LARGE_KEY":MapmyIndiaContentSize.large.rawValue,
                
            ] as NSObject
          }
    
    
    func didAutocomplete(viewController: MapmyIndiaAutocompleteViewController, withPlace place: MapmyIndiaAtlasSuggestion) {
        //print("placeAddress \(place.placeAddress)")
        
        print("place.addressTokens \(String(describing: place.addressTokens?.poi))")
        var data : [String: Any] = [:]
        if let eLoc = place.eLoc { data["elc"] = eLoc }
        if let placeName = place.placeName { data["placeName"] = placeName }
        if let placeAddress = place.placeAddress { data["addr"] = placeAddress }
        if let longitude = place.longitude { data["x"] = "\(longitude)" }
        if let latitude = place.latitude { data["y"] = "\(latitude)" }
        if let type = place.type { data["type"] = type }
        if let entryLatitude = place.entryLatitude { data["entryLatitude"] = entryLatitude }
        if let entryLongitude = place.entryLongitude { data["entryLongitude"] = entryLongitude }
        if let orderIndex = place.orderIndex { data["orderIndex"] = orderIndex }
        if let keywords = place.keywords { data["keywords"] = keywords }
        if let typeX = place.orderIndex { data["typeX"] = typeX }
//        ["elc":place.eLoc,
//                                     "placeName": place.placeName,
//                                     "addr": place.placeAddress,
//                                     "x": "\(place.longitude)",
//                                     "y": "\(place.latitude)",
//                                     "type": place.type,
//                                     "entryLatitude": place.entryLatitude,
//                                     "entryLongitude": place.entryLongitude,
//                                     "orderIndex": place.orderIndex,
//                                     "keywords": place.keywords,
//                                     "typeX": place.typeX
//        ]
        if let addressToken = place.addressTokens {
            var addressTokenData : [String: Any] = [:]
            if let poi = addressToken.poi { addressTokenData["poi"] = poi }
            if let city = addressToken.city { addressTokenData["city"] = city }
            if let district = addressToken.district { addressTokenData["district"] = district }
            if let houseName = addressToken.houseName { addressTokenData["houseName"] = houseName }
            if let locality = addressToken.locality { addressTokenData["locality"] = locality }
            if let pincode = addressToken.pincode { addressTokenData["pincode"] = pincode }
            if let state = addressToken.state { addressTokenData["state"] = state }
            if let street = addressToken.street { addressTokenData["street"] = street }
            if let subDistrict = addressToken.subDistrict { addressTokenData["subDistrict"] = subDistrict }
            if let subLocality = addressToken.subLocality { addressTokenData["subLocality"] = subLocality }
            if let subSubLocality = addressToken.subSubLocality { addressTokenData["subSubLocality"] = subSubLocality }
            if let village = addressToken.village { addressTokenData["village"] = village }
            
            data["addressTokens"] = addressTokenData
//            data["addressTokens"] = ["poi": addressToken.poi,
//                                             "city": addressToken.city,
//                                             "district":addressToken.district,
//                                             "houseName": addressToken.houseName,
//                                             "houseNumber": addressToken.houseNumber,
//                                             "locality": addressToken.locality,
//                                             "pincode": addressToken.pincode,
//                                             "state": addressToken.state,
//                                             "street": addressToken.street,
//                                             "subDistrict": addressToken.subDistrict,
//                                             "subLocality": addressToken.subLocality,
//                                             "subSubLocality": addressToken.subSubLocality,
//                                             "village": addressToken.village]
        }
        
        print("data: \(data)")
        
//        "addressTokens" : ["poi": addressToken?.poi,
//        "city": addressToken?.city,
//        "district":addressToken?.district,
//        "houseName": addressToken?.houseName,
//        "houseNumber": addressToken?.houseNumber,
//        "locality": addressToken?.locality,
//        "pincode": addressToken?.pincode,
//        "state": addressToken?.state,
//        "street": addressToken?.street,
//        "subDistrict": addressToken?.subDistrict,
//        "subLocality": addressToken?.subLocality,
//        "subSubLocality": addressToken?.subSubLocality,
//        "village": addressToken?.village]
//

        print(place.entryLatitude ?? Double(0))
        var theJSONData: Data?
        do {
            theJSONData = try? JSONSerialization.data(withJSONObject: data, options: [])
        } catch(let jsonError) {
            print(jsonError.localizedDescription)
        }
        if let jsonData = theJSONData {
            let theJSONText = String(data: jsonData, encoding: .ascii)
            self.resolver!("\(theJSONText ?? "")")
            //print("JSON string = \(theJSONText!)")
        }
        UIApplication.shared.keyWindow?.rootViewController?.dismiss(animated: false, completion: nil)
        
        
    }
    
    func didFailAutocomplete(viewController: MapmyIndiaAutocompleteViewController, withError error: NSError) {
       // rejecter!("Fail AutoCompelte", "\(error.localizedDescription)", nil)
        
    }
    
    func wasCancelled(viewController: MapmyIndiaAutocompleteViewController) {
        rejecter!("Cancle", "Close", nil)
    }
    
    @objc func openPlaceWidget(_ params:NSDictionary,reslover resolve: @escaping RCTPromiseResolveBlock,rejecter reject: @escaping RCTPromiseRejectBlock ) -> Void  {
     
        DispatchQueue.main.async {
            self.resolver = resolve
            self.rejecter = reject
            let controller = MapmyIndiaAutocompleteViewController()
            controller.delegate = self
            controller.autocompleteFilter = self.autoCompleteFilter(params: params)
            //yet not availble for ios
            if params["historyCount"] != nil {
                //let historyCount=params["historyCount"] as! Int
               // HistoryCountToShow = historyCount
                    }
            
            //yet not availble for ios
            if params["saveHistory"] != nil {
                //let mSaveHistory=params["saveHistory"] as! Bool
               // print(mSaveHistory)
               // IsHistoryEnabled=true
            }
            if params["backgroundColor"] != nil {
                let mBackgroundColor = params["backgroundColor"] as! String
                controller.tableCellBackgroundColor = self.colorWithHexString(hexString: mBackgroundColor) //self.getUIColorFromAndroidColorInt(androidColorInt:[mBackgroundColor.intValue])
            }
               
            if params["toolbarColor"] != nil {
                let mToolbarColor = params["toolbarColor"] as! String
                UINavigationBar.appearance(whenContainedInInstancesOf: [MapmyIndiaAutocompleteViewController.self]).barTintColor=self.colorWithHexString(hexString: mToolbarColor)
            } else {
                UINavigationBar.appearance(whenContainedInInstancesOf: [MapmyIndiaAutocompleteViewController.self]).barTintColor=self.colorWithHexString(hexString: "#FFFFFF")
            }
           
            if params["hint"] != nil {
                let mHint = params["hint"] as! String
                //SearchBarPlaceHolderText = mHint
//                UITextField.appearance(whenContainedInInstancesOf: [MapmyIndiaAutocompleteViewController.self]).placeholder = mHint
            }
            
            if params["attributionVerticalAlignment"] != nil {
                                let attributionVerticalAlignment = params["attributionVerticalAlignment"] as! Int
                                controller.attributionSettings.attributionVerticalPlacement = MapmyIndiaVerticalPlacement(rawValue: attributionVerticalAlignment)!
              
                            }
                            
                            if params["attributionHorizontalAlignment"] != nil {
                                let attributionHorizontalAlignment = params["attributionHorizontalAlignment"] as! Int
                                controller.attributionSettings.attributionHorizontalContentAlignment = MapmyIndiaHorizontalContentAlignment(rawValue: attributionHorizontalAlignment)!
                            }
                
                            if params["logoSize"] != nil {
                                let logoSize = params["logoSize"] as! Int
                                controller.attributionSettings.attributionSize = MapmyIndiaContentSize(rawValue: logoSize)!
                                
                            }
            UIApplication.shared.keyWindow?.rootViewController?.present(controller, animated: false, completion: nil)
         }
   }
    
    func autoCompleteFilter(params : NSDictionary) -> MapmyIndiaAutocompleteFilter {
        let autocompleteFilter = MapmyIndiaAutocompleteFilter()
        if params["tokenizeAddress"] != nil {
            let mTokenizeAddress=params["tokenizeAddress"] as! Bool
            if mTokenizeAddress {
                autocompleteFilter.attributions = mTokenizeAddress
            }
        }
        
        if params["zoom"] != nil {
            let mZoom = params["zoom"] as! NSNumber
            autocompleteFilter.zoom = mZoom
        }
        
        if params["pod"] != nil {
            let pod = params["pod"] as! String
            autocompleteFilter.resultPlaceType = MMIPodTypeIdentifier(pod)
        }
        
        if params["location"] != nil {
            let locationString = params["location"] as! NSArray
            if locationString.count==2 {
                let lat=(locationString[1] as! NSNumber).doubleValue
                let lng=(locationString[0] as! NSNumber).doubleValue
                autocompleteFilter.origin = CLLocation(latitude: lat, longitude:lng)
            }
        }
        
        if params["filter"] != nil {
            let mFilter = params["filter"] as! String
            
            if mFilter.contains("bounds") {
                let filterArray = (params["filter"] as! String).components(separatedBy: ":")
                let boundsArray = filterArray[1].components(separatedBy: ";")
                let firstBound = boundsArray[0].components(separatedBy: ",")
                let secondBound = boundsArray[1].components(separatedBy: ",")
                let firstLng=(firstBound[1] as NSString).doubleValue
                let firstLat=(firstBound[0] as NSString).doubleValue
                let secondLng=(secondBound[1] as NSString).doubleValue
                let secondLat=(secondBound[0] as NSString).doubleValue
                
                let southwest = CLLocationCoordinate2D(latitude: firstLat, longitude: firstLng)
                let northeast = CLLocationCoordinate2D(latitude: secondLat, longitude: secondLng)
                autocompleteFilter.searchAreaRestrictions = MapmyIndiaBoundsFilter(bounds: MapmyIndiaRectangularRegion(topLeft: northeast, bottomRight: southwest))
            }
            else if mFilter.contains("cop")  {
                let filterArray = (params["filter"] as! String).components(separatedBy: ":")
                
                autocompleteFilter.searchAreaRestrictions = MapmyIndiaElocFilter(placeId: filterArray[1])
            }
            
        }

        
        return autocompleteFilter
    }
    
    func colorWithHexString(hexString: String, alpha:CGFloat = 1.0) -> UIColor {

        // Convert hex string to an integer
        let hexint = Int(self.intFromHexString(hexStr: hexString))
        let red = CGFloat((hexint & 0xff0000) >> 16) / 255.0
        let green = CGFloat((hexint & 0xff00) >> 8) / 255.0
        let blue = CGFloat((hexint & 0xff) >> 0) / 255.0

        // Create color object, specifying alpha as well
        let color = UIColor(red: red, green: green, blue: blue, alpha: alpha)
        return color
    }
    
    func intFromHexString(hexStr: String) -> UInt32 {
        var hexInt: UInt32 = 0
        // Create scanner
        let scanner: Scanner = Scanner(string: hexStr)
        // Tell scanner to skip the # character
        scanner.charactersToBeSkipped = CharacterSet(charactersIn: "#")
        // Scan hex value
        scanner.scanHexInt32(&hexInt)
        return hexInt
    }
}

