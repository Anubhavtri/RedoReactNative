package com.mapbox.rctmgl.utils;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.util.DisplayMetrics;
import android.util.Log;

import com.facebook.common.logging.FLog;
import com.facebook.common.references.CloseableReference;
import com.facebook.datasource.DataSource;
import com.facebook.datasource.DataSources;
import com.facebook.drawee.backends.pipeline.Fresco;
import com.facebook.imagepipeline.common.RotationOptions;
import com.facebook.imagepipeline.image.CloseableImage;
import com.facebook.imagepipeline.image.CloseableStaticBitmap;
import com.facebook.imagepipeline.request.ImageRequest;
import com.facebook.imagepipeline.request.ImageRequestBuilder;
import com.facebook.react.views.imagehelper.ImageSource;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;

class LongRunningTask implements Callable<List<Map.Entry<String, Bitmap>>> {
    private final Map.Entry<String, ImageEntry>[] input;
    private final Object mCallerContext;
    private final Context context;

    public static final String LOG_TAG = DownloadMapImageTask.class.getSimpleName();

    public LongRunningTask(Map.Entry<String, ImageEntry>[] input, Object callerContext, Context context) {
        this.input = input;
        this.mCallerContext = callerContext;
        this.context = context;
    }

    @Override
    public List<Map.Entry<String, Bitmap>> call() {
        List<Map.Entry<String, Bitmap>> images = new ArrayList<>();
        if (context == null) return images;

        Resources resources = context.getResources();
        DisplayMetrics metrics = resources.getDisplayMetrics();

        for (Map.Entry<String, ImageEntry> object : input) {
            ImageEntry imageEntry = object.getValue();

            String uri = imageEntry.uri;

            if (uri.startsWith("http://") || uri.startsWith("https://") ||
                    uri.startsWith("file://") || uri.startsWith("asset://") || uri.startsWith("data:")) {
                ImageSource source = new ImageSource(context, uri);
                ImageRequest request = ImageRequestBuilder.newBuilderWithSource(source.getUri())
                        .setRotationOptions(RotationOptions.autoRotate())
                        .build();

                System.out.println("Add Image On Map --- " + uri);

                DataSource<CloseableReference<CloseableImage>> dataSource =
                        Fresco.getImagePipeline().fetchDecodedImage(request, mCallerContext);

                CloseableReference<CloseableImage> result = null;
                try {
                    result = DataSources.waitForFinalResult(dataSource);
                    if (result != null) {
                        CloseableImage image = result.get();
                        if (image instanceof CloseableStaticBitmap) {
                            CloseableStaticBitmap closeableStaticBitmap = (CloseableStaticBitmap) image;
                            Bitmap bitmap = closeableStaticBitmap.getUnderlyingBitmap()
                                    // Copy the bitmap to make sure it doesn't get recycled when we release
                                    // the fresco reference.
                                    .copy(Bitmap.Config.ARGB_8888, true);
                            bitmap.setDensity((int) ((double) DisplayMetrics.DENSITY_DEFAULT * imageEntry.scale));
                            images.add(new AbstractMap.SimpleEntry<>(object.getKey(), bitmap));
                        } else {
                            FLog.e(LOG_TAG, "Failed to load bitmap from: " + uri);
                        }
                    } else {
                        FLog.e(LOG_TAG, "Failed to load bitmap from: " + uri);
                    }
                } catch (Throwable e) {
                    Log.w(LOG_TAG, e.getLocalizedMessage());
                } finally {
                    dataSource.close();
                    if (result != null) {
                        CloseableReference.closeSafely(result);
                    }
                }
            } else {
                // local asset required from JS require('image.png') or import icon from 'image.png' while in release mode
                Bitmap bitmap = BitmapUtils.getBitmapFromResource(context, uri, getBitmapOptions(metrics, imageEntry.scale));
                if (bitmap != null) {
                    images.add(new AbstractMap.SimpleEntry<>(object.getKey(), bitmap));
                } else {
                    FLog.e(LOG_TAG, "Failed to load bitmap from: " + uri);
                }
            }
        }

        return images;
    }


    private BitmapFactory.Options getBitmapOptions(DisplayMetrics metrics, Double scale) {
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inScreenDensity = metrics.densityDpi;
        options.inTargetDensity = metrics.densityDpi;
        options.inDensity = (int) ((double) DisplayMetrics.DENSITY_DEFAULT * scale);
        return options;
    }
}