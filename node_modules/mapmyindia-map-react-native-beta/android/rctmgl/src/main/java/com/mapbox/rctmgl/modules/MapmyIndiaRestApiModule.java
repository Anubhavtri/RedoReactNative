package com.mapbox.rctmgl.modules;

import android.view.View;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.module.annotations.ReactModule;
import com.google.gson.Gson;
import com.mapbox.geojson.Point;
import com.mmi.services.api.Place;
import com.mmi.services.api.PlaceResponse;
import com.mmi.services.api.autosuggest.MapmyIndiaAutoSuggest;
import com.mmi.services.api.autosuggest.model.AutoSuggestAtlasResponse;
import com.mmi.services.api.autosuggest.model.ELocation;
import com.mmi.services.api.directions.DirectionsCriteria;
import com.mmi.services.api.directions.MapmyIndiaDirections;
import com.mmi.services.api.directions.models.DirectionsResponse;
import com.mmi.services.api.directions.models.DirectionsRoute;
import com.mmi.services.api.directions.models.LegStep;
import com.mmi.services.api.directions.models.RouteLeg;
import com.mmi.services.api.distance.MapmyIndiaDistanceMatrix;
import com.mmi.services.api.distance.models.DistanceResponse;
import com.mmi.services.api.distance.models.DistanceResults;
import com.mmi.services.api.geocoding.GeoCode;
import com.mmi.services.api.geocoding.GeoCodeResponse;
import com.mmi.services.api.geocoding.MapmyIndiaGeoCoding;
import com.mmi.services.api.nearby.MapmyIndiaNearby;
import com.mmi.services.api.nearby.model.NearbyAtlasResponse;
import com.mmi.services.api.nearby.model.NearbyAtlasResult;
import com.mmi.services.api.reversegeocode.MapmyIndiaReverseGeoCode;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

@ReactModule(name = RCTMGLLocationModule.REACT_CLASS)
public class MapmyIndiaRestApiModule extends ReactContextBaseJavaModule {

    public static final String REACT_CLASS = "MapmyIndiaRestApiModule";


    public MapmyIndiaRestApiModule(ReactApplicationContext mReactContext) {
        super(mReactContext);
    }


    @NonNull
    @Override
    public String getName() {
        return REACT_CLASS;
    }


    //reverse geocode api
    @ReactMethod
    public void rev_geocode(final Double latitude, final Double longitude, final Promise callback){

        MapmyIndiaReverseGeoCode.builder()
                .setLocation(latitude,longitude)
                .build().enqueueCall(new Callback<PlaceResponse>() {
            @Override
            public void onResponse(Call<PlaceResponse> call, Response<PlaceResponse> response) {

                if (response.code() == 200) {
                    if (response.body() != null) {
                        List<Place> placesList = response.body().getPlaces();
                        Place place = placesList.get(0);
                        callback.resolve(new Gson().toJson(place));

                    } else {
                        callback.reject(response.body().getResponseCode()+"","Not able to get value, Try again.");
                    }
                } else {
                    callback.reject(response.code()+"", response.message());
                }
            }

            @Override
            public void onFailure(Call<PlaceResponse> call, Throwable t) {
                callback.reject(t);
            }
        });
    }

    //geocode api
    @ReactMethod
    public void  geoCode(final String queryText,final  Promise callback){

        MapmyIndiaGeoCoding.builder()
                .setAddress(queryText)
                .build().enqueueCall(new Callback<GeoCodeResponse>() {
            @Override
            public void onResponse(Call<GeoCodeResponse> call, Response<GeoCodeResponse> response) {
                if (response.code() == 200) {
                    if (response.body() != null) {
                        List<GeoCode> placesList = response.body().getResults();
                        GeoCode place = placesList.get(0);
                        callback.resolve(new Gson().toJson(place));

                    } else {
                        callback.reject(response.message(),"Not able to get value, Try again.");
                    }
                } else {
                    callback.reject(response.code()+"", response.message());
                }
            }

            @Override
            public void onFailure(Call<GeoCodeResponse> call, Throwable t) {
                callback.reject(t);
            }
        });
    }

    //AutoSuggest api
    @ReactMethod
    public void autoSuggest(final String queryText,final Promise callback){
        MapmyIndiaAutoSuggest.builder()
                .query(queryText)
                .build()
                .enqueueCall(new Callback<AutoSuggestAtlasResponse>() {
                    @Override
                    public void onResponse(Call<AutoSuggestAtlasResponse> call, Response<AutoSuggestAtlasResponse> response) {

                        if (response.code() == 200) {
                            if (response.body() != null) {
                                ArrayList<ELocation> suggestedList = response.body().getSuggestedLocations();
                                if (suggestedList.size() > 0) {
                                    callback.resolve(new Gson().toJson(suggestedList));
                                }else {
                                    callback.reject(response.message(),"Not able to get value, Try again.");
                                }

                            }
                            else {
                                callback.reject(response.code()+"", "null response body");
                            }
                        } else {
                            callback.reject(response.code()+"", response.message());
                        }

                    }

                    @Override
                    public void onFailure(Call<AutoSuggestAtlasResponse> call, Throwable t) {
                        callback.reject(t);
                    }
                });
    }

    //nearby api
    @ReactMethod
    public void nearby(final Double latitude, final Double longitude,final  String queryText,final Promise callback){

        MapmyIndiaNearby.builder()
                .setLocation(latitude, longitude)
                .keyword(queryText)
                .build()
                .enqueueCall(new Callback<NearbyAtlasResponse>() {
                    @Override
                    public void onResponse(Call<NearbyAtlasResponse> call, Response<NearbyAtlasResponse> response) {

                        if (response.code() == 200) {
                            if (response.body() != null) {
                                ArrayList<NearbyAtlasResult> nearByList = response.body().getSuggestedLocations();
                                if (nearByList.size() > 0) {
                                    callback.resolve(new Gson().toJson(nearByList));
                                }
                            } else {
                                callback.reject(response.code()+"", "null response body");
                            }
                        } else {
                            callback.reject(response.code()+"", response.message());
                        }


                    }

                    @Override
                    public void onFailure(Call<NearbyAtlasResponse> call, Throwable t) {
                        callback.reject(t);
                    }
                });
    }

    //Directions api
    @ReactMethod
    public void  directions(final Double originLat,final Double originLng ,final Double destinationLat,final Double destinationLng,String profile,final Promise callback ){
        MapmyIndiaDirections.builder()
                .origin(Point.fromLngLat(originLng, originLat))
                .destination(Point.fromLngLat(destinationLng, destinationLat))
                .profile(profile)
                .resource(DirectionsCriteria.RESOURCE_ROUTE)
                .steps(true)
                .alternatives(false)
                .overview(DirectionsCriteria.OVERVIEW_FULL).build().enqueueCall(new Callback<DirectionsResponse>() {
            @Override
            public void onResponse(@NonNull Call<DirectionsResponse> call, @NonNull Response<DirectionsResponse> response) {
                if (response.code() == 200) {
                    if (response.body() != null) {
                        DirectionsResponse directionsResponse = response.body();
                        List<DirectionsRoute> results = directionsResponse.routes();
                        if (results.size() > 0) {
                            DirectionsRoute routeLegList = results.get(0);
                            callback.resolve(new Gson().toJson(routeLegList));
                        }

                    }else {
                        callback.reject("null response");
                    }
                }
                else {
                    callback.reject(response.code()+"", response.message());
                }
            }

            @Override
            public void onFailure(@NonNull Call<DirectionsResponse> call, @NonNull Throwable t) {
                callback.reject(t);

            }
        });
    }

    //distance api




    @ReactMethod
    public void distance(ReadableArray pointList, final String profile, final Promise callback){

        ArrayList<Point> points=new ArrayList<>();

     for (int i=0;i<pointList.size();i++){
        ReadableArray pointString=pointList.getArray(i);
        points.add(Point.fromLngLat(pointString.getDouble(0),pointString.getDouble(1)));
     }



        MapmyIndiaDistanceMatrix.builder()
                .coordinates(points)
                .profile(profile)
                .resource(DirectionsCriteria.RESOURCE_DISTANCE_ETA)
                .build()
                .enqueueCall(new Callback<DistanceResponse>() {
                    @Override
                    public void onResponse(Call<DistanceResponse> call, Response<DistanceResponse> response) {
                        if (response.code() == 200) {
                            if (response.body() != null) {
                                DistanceResponse legacyDistanceResponse = response.body();
                                DistanceResults distanceResults = legacyDistanceResponse.results();
                                if (distanceResults != null) {
                                    callback.resolve(new Gson().toJson(distanceResults));
                                } else {
                                    callback.reject(response.code()+"", response.message());
                                }
                            }
                        }
                    }

                    @Override
                    public void onFailure(Call<DistanceResponse> call, Throwable t) {
                        callback.reject(t);
                    }
                });
    }


}
