import {Animated, NativeModules, PermissionsAndroid} from 'react-native';

import {isAndroid} from './utils';
import * as geoUtils from './utils/geoUtils';
import MapView from './components/MapView';
import Light from './components/Light';
import PointAnnotation from './components/PointAnnotation';
import Annotation from './components/annotations/Annotation'; // eslint-disable-line import/no-cycle
import Callout from './components/Callout';
import UserLocation from './components/UserLocation'; // eslint-disable-line import/no-cycle
import Camera from './components/Camera';
import VectorSource from './components/VectorSource';
import ShapeSource from './components/ShapeSource';
import RasterSource from './components/RasterSource';
import ImageSource from './components/ImageSource';
import Images from './components/Images';
import FillLayer from './components/FillLayer';
import FillExtrusionLayer from './components/FillExtrusionLayer';
import HeatmapLayer from './components/HeatmapLayer';
import LineLayer from './components/LineLayer';
import CircleLayer from './components/CircleLayer';
import SymbolLayer from './components/SymbolLayer';
import RasterLayer from './components/RasterLayer';
import BackgroundLayer from './components/BackgroundLayer';
import locationManager from './modules/location/locationManager';
import offlineManager from './modules/offline/offlineManager';
import snapshotManager from './modules/snapshot/snapshotManager';
import AnimatedMapPoint from './utils/AnimatedPoint';
import RestApi from './modules/restApi/RestApi'
import Polyline from './utils/Polyline';

const MapmyIndiaGL = {...NativeModules.MGLModule};

// static methods
MapmyIndiaGL.setClusterId = function(clusterId,deviceAlias){
  if(deviceAlias){
    MapmyIndiaGL.settingClusterId(clusterId,deviceAlias);
  }else{
    MapmyIndiaGL.settingClusterId(clusterId,null);
  }
  
  }
MapmyIndiaGL.requestAndroidLocationPermissions = async function() {
  if (isAndroid()) {
    const res = await PermissionsAndroid.requestMultiple([
      PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      PermissionsAndroid.PERMISSIONS.ACCESS_COARSE_LOCATION,
    ]);

    if (!res) {
      return false;
    }

    const permissions = Object.keys(res);
    for (const permission of permissions) {
      if (res[permission] === PermissionsAndroid.RESULTS.GRANTED) {
        return true;
      }
    }

    return false;
  }

  throw new Error('You should only call this method on Android!');
};

MapmyIndiaGL.UserTrackingModes = Camera.UserTrackingModes;

// components
MapmyIndiaGL.MapView = MapView;
MapmyIndiaGL.Light = Light;
MapmyIndiaGL.PointAnnotation = PointAnnotation;
MapmyIndiaGL.Callout = Callout;
MapmyIndiaGL.UserLocation = UserLocation;
MapmyIndiaGL.Camera = Camera;

// annotations
MapmyIndiaGL.Annotation = Annotation;

// sources
MapmyIndiaGL.VectorSource = VectorSource;
MapmyIndiaGL.ShapeSource = ShapeSource;
MapmyIndiaGL.RasterSource = RasterSource;
MapmyIndiaGL.ImageSource = ImageSource;
MapmyIndiaGL.Images = Images;

// layers
MapmyIndiaGL.FillLayer = FillLayer;
MapmyIndiaGL.FillExtrusionLayer = FillExtrusionLayer;
MapmyIndiaGL.HeatmapLayer = HeatmapLayer;
MapmyIndiaGL.LineLayer = LineLayer;
MapmyIndiaGL.CircleLayer = CircleLayer;
MapmyIndiaGL.SymbolLayer = SymbolLayer;
MapmyIndiaGL.RasterLayer = RasterLayer;
MapmyIndiaGL.BackgroundLayer = BackgroundLayer;

// modules
MapmyIndiaGL.locationManager = locationManager;
MapmyIndiaGL.offlineManager = offlineManager;
MapmyIndiaGL.snapshotManager = snapshotManager;
MapmyIndiaGL.RestApi = RestApi;

// utils
MapmyIndiaGL.geoUtils = geoUtils;
MapmyIndiaGL.AnimatedPoint = AnimatedMapPoint;
MapmyIndiaGL.Polyline = Polyline;

// animated
MapmyIndiaGL.Animated = {
  // sources
  ShapeSource: Animated.createAnimatedComponent(ShapeSource),
  ImageSource: Animated.createAnimatedComponent(ImageSource),

  // layers
  FillLayer: Animated.createAnimatedComponent(FillLayer),
  FillExtrusionLayer: Animated.createAnimatedComponent(FillExtrusionLayer),
  LineLayer: Animated.createAnimatedComponent(LineLayer),
  CircleLayer: Animated.createAnimatedComponent(CircleLayer),
  SymbolLayer: Animated.createAnimatedComponent(SymbolLayer),
  RasterLayer: Animated.createAnimatedComponent(RasterLayer),
  BackgroundLayer: Animated.createAnimatedComponent(BackgroundLayer),
};

export default MapmyIndiaGL;
