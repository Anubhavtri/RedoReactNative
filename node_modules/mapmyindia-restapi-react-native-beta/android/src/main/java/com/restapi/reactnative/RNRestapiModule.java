/*
 *  RNRestapiModule.java
 *  Methods
 *  Created by Anuj Singh on 01/03/2019.
 *  Copyright Â© 2019 CE INFO Systems Pvt. Ltd. All rights reserved.
 */
package com.restapi.reactnative;

import android.content.Context;
import android.graphics.Color;
import android.graphics.Typeface;
import android.graphics.drawable.GradientDrawable;
import android.net.Uri;
import android.text.Layout;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.facebook.common.logging.FLog;
import com.facebook.react.bridge.*;
import java.util.HashMap;
import java.util.Objects;
import java.util.Iterator;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableMapKeySetIterator;
import com.facebook.react.bridge.ReadableType;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.LinkedHashMap;
import java.util.Map;
import java.net.URLEncoder;

public class RNRestapiModule extends ReactContextBaseJavaModule {

    private final static String BASE_REQ_URL = "https://apis.mapmyindia.com/advancedmaps/v1";
    private final static String ATLAS_REQ_URL = "https://atlas.mapmyindia.com/api/places";
    private final static String EXPLORE_REQ_URL = "https://explore.mapmyindia.com/apis/O2O/entity/";
    private final String token_url = "https://outpost.mapmyindia.com/api/security/oauth/token";
    private String oauth2_token_type = null;
    private String oauth2_access_token = null;
    private Long oauth2_token_validity = null;
    public static String Lin_key = null;
    public static String Client_id = null;
    public static String Client_secret = null;

    private final ReactApplicationContext reactContext;

    public RNRestapiModule(ReactApplicationContext reactContext) {
        super(reactContext);
        this.reactContext = reactContext;
    }

    @Override
    public String getName() {
        return "RNRestapiModule";
    }

    @ReactMethod
    public void setRestApiKey(final String lin_key) {
        Lin_key = lin_key;
    }

    @ReactMethod
    public void setClientId(final String client_id) {
        Client_id = client_id;
    }

    @ReactMethod
    public void setClientSecret(final String client_secret) {
        Client_secret = client_secret;
    }

    @ReactMethod
    public void placeDetails(final String placeId, Callback successCallback) throws Exception {
        String url = BASE_REQ_URL + "/" + Lin_key + "/place_detail?place_id=" + placeId;
        this.getHttp(successCallback, url);
    }


    @ReactMethod
    public void place_details(final String placeId, Callback successCallback) throws Exception {
        String url = EXPLORE_REQ_URL + placeId;
        this.atlasRequest(successCallback, Client_id, Client_secret, url);
    }

    @ReactMethod
    public void atlas_geocode(final String addr, final ReadableMap map, Callback successCallback) {

        try {
            String url = ATLAS_REQ_URL + "/geocode";
            Uri.Builder params = new Uri.Builder();
            params.appendQueryParameter("address", addr);
            if (map.hasKey("itemCount")) {
                params.appendQueryParameter("itemCount", String.valueOf(map.getInt("itemCount")));
            }
            urlBuilder(map, "podFilter", params);
            if (map.hasKey("bias")) {
                params.appendQueryParameter("bias", String.valueOf(map.getInt("bias")));
            }
            urlBuilder(map, "bound", params);


            String encodedUrl = url + params.toString();
            this.atlasRequest(successCallback, Client_id, Client_secret, encodedUrl);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void urlBuilder(ReadableMap map, String key, Uri.Builder params) {
        try {
            if (map.hasKey(key)) {
                params.appendQueryParameter(key, map.getString(key));
            }
        } catch (Exception e) {
            Log.e("RESTAPIMODULE: ", e.getLocalizedMessage());
        }
    }



    @ReactMethod
    public void rev_geocode(final String lat, final String lng, Callback successCallback)
            throws Exception {
        String url = BASE_REQ_URL + "/" + Lin_key + "/rev_geocode?lat=" + lat + "&lng=" + lng;
        this.getHttp(successCallback, url);
    }

    @ReactMethod
    public void atlas_auto(final String query, final ReadableMap map, Callback successCallback) throws Exception {
        try {
            String url = ATLAS_REQ_URL + "/search/json";
            Uri.Builder urlParams = new Uri.Builder();
            urlParams.appendQueryParameter("query", query);
            urlBuilder(map, "location", urlParams);
            if (map.hasKey("zoom")) {
                urlParams.appendQueryParameter("zoom", String.valueOf(map.getDouble("zoom")));
            }
            if (map.hasKey("tokenizeAddress")) {
                String value = String.valueOf(map.getBoolean("tokenizeAddress"));
                if (value == "true")
                    urlParams.appendQueryParameter("tokenizeAddress", value);
            }
            urlBuilder(map, "pod", urlParams);
            urlBuilder(map, "filter", urlParams);

            String encodedUrl = url + urlParams;
            this.atlasRequest(successCallback, Client_id, Client_secret, encodedUrl);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @ReactMethod
    public void atlas_nearby(final ReadableMap map, Callback successCallback) throws Exception {
        try {
            String url = ATLAS_REQ_URL + "/nearby/json";
            Uri.Builder urlParams = new Uri.Builder();
            urlBuilder(map, "keywords", urlParams);
            urlBuilder(map, "refLocation", urlParams);
            if (map.hasKey("page")) {
                urlParams.appendQueryParameter("page", String.valueOf(map.getInt("page")));
            }
            urlBuilder(map, "sort", urlParams);
            if (map.hasKey("radius")) {
                urlParams.appendQueryParameter("radius", String.valueOf(map.getInt("radius")));
            }

            urlBuilder(map, "bounds", urlParams);
            urlBuilder(map, "filter", urlParams);
            String encodedUrl = url + urlParams;
            this.atlasRequest(successCallback, Client_id, Client_secret, encodedUrl);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    @ReactMethod
    public void distance_matrix(final String source, final String destination, final String profile, final String region, final String rtype, final String sources, final String destinations, Callback successCallback) throws Exception {
        String url = BASE_REQ_URL + "/" + Lin_key + "/distance_matrix/" + profile + "/" + source + ";" + destination + "?region=" + region + "&rtype=" + rtype + "&sources=" + sources + "&destinations=" + destinations;
        this.getHttp(successCallback, url);
    }

    @ReactMethod
    public void distance_matrix_eta(final String source, final String destination, final String profile, final String region, final String rtype, final String sources, final String destinations,
                                    Callback successCallback) throws Exception {
        String url = BASE_REQ_URL + "/" + Lin_key + "/distance_matrix_eta/" + profile + "/" + source + ";" + destination + "?region=" + region + "&rtype=" + rtype + "&sources=" + sources + "&destinations=" + destinations;
        this.getHttp(successCallback, url);
    }


    @ReactMethod
    public void route_adv(final String source, final String destination, final String profile, final String geometries, final String steps, final String exclude, final String rtype, final String region, final String overview, final String bearings, final String alternatives, final String radiuses, Callback successCallback) throws Exception {
        String url = BASE_REQ_URL + "/" + Lin_key + "/route_adv/" + profile + "/" + source + ";" + destination + "?geometries=" + geometries + "&steps=" + steps + "&exclude=" + exclude + "&rtype=" + rtype + "&region=" + region + "&overview=" + overview + "&bearings=" + bearings + "&alternatives=" + alternatives + "&radiuses=" + radiuses;
        this.getHttp(successCallback, url);
    }

    @ReactMethod
    public void route_eta(final String source, final String destination, final String profile, final String geometries, final String steps, final String exclude, final String rtype, final String region, final String overview, final String bearings, final String alternatives, final String radiuses, Callback successCallback) throws Exception {
        String url = BASE_REQ_URL + "/" + Lin_key + "/route_eta/" + profile + "/" + source + ";" + destination + "?geometries=" + geometries + "&steps=" + steps + "&exclude=" + exclude + "&rtype=" + rtype + "&region=" + region + "&overview=" + overview + "&bearings=" + bearings + "&alternatives=" + alternatives + "&radiuses=" + radiuses;
        this.getHttp(successCallback, url);
    }

    private void getHttp(final Callback successCallback, String urlStr) {
        HttpURLConnection conn = null;
        JSONObject jsonResponse = null;
        WritableMap finalResponse = null;
        String res = "";
        try {
            URL url = new URL(urlStr);
            conn = (HttpURLConnection) url.openConnection();
            conn.setConnectTimeout(9000);
            conn.setRequestMethod("GET");
            int status = conn.getResponseCode();
            InputStream in = new BufferedInputStream(conn.getInputStream());
            BufferedReader reader = null;
            StringBuilder response = new StringBuilder();
            try {
                reader = new BufferedReader(new InputStreamReader(in, "UTF-8"));
                String line = "";
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
            } catch (Exception e) {
                e.printStackTrace();
                res = "error in inputstream reading";
            } finally {
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
            res = response.toString();
            jsonResponse = new JSONObject(res);
            finalResponse = jsonToReact(jsonResponse);
        } catch (Exception e) {
            res = "Parameter missing";
            e.printStackTrace();
        } finally {
            try {
                if (conn != null) {
                    conn.disconnect();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (res != "") {
            successCallback.invoke(finalResponse);
        } else {
            try {
                JSONObject error_res = new JSONObject();
                error_res.put("responseCode", 400);
                error_res.put("message", "Error in HTTP Call. please try after sometime");
                finalResponse = jsonToReact(error_res);
                successCallback.invoke(finalResponse);
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }


    private void setOAuth2AccessToken(String grantType, String clientId, String clientSecret) {
        try {
            Map<String, Object> params = new LinkedHashMap<String, Object>();
            params.put("grant_type", grantType);
            params.put("client_id", clientId);
            params.put("client_secret", clientSecret);

            StringBuilder postData = new StringBuilder();
            for (Map.Entry<String, Object> param : params.entrySet()) {
                if (postData.length() != 0) {
                    postData.append('&');
                }

                postData.append(URLEncoder.encode(param.getKey(), "UTF-8"));
                postData.append('=');
                postData.append(URLEncoder.encode(String.valueOf(param.getValue()), "UTF-8"));
            }
            byte[] postDataBytes = postData.toString().getBytes("UTF-8");
            HttpURLConnection conn = (HttpURLConnection) new URL(token_url).openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            conn.setRequestProperty("Content-Length", String.valueOf(postDataBytes.length));
            conn.setDoOutput(true);
            conn.getOutputStream().write(postDataBytes);

            StringBuilder responseStrBuilder = new StringBuilder();
            String res = "";
            BufferedReader reader = null;
            try {
                InputStream in = new BufferedInputStream(conn.getInputStream());
                reader = new BufferedReader(new InputStreamReader(in, "UTF-8"));
                String line = "";

                while ((line = reader.readLine()) != null) {
                    responseStrBuilder.append(line);
                }
            } catch (Exception e) {
                e.printStackTrace();
                res = "error in inputstream reading";
            } finally {
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

            res = responseStrBuilder.toString();
            JSONObject response = new JSONObject(res);
            // System.out.println(response);
            if (response != null) {
                oauth2_token_type = (String) response.get("token_type");
                oauth2_access_token = (String) response.get("access_token");
                oauth2_token_validity = System.currentTimeMillis() / 1000
                        + Long.valueOf(response.get("expires_in").toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public void atlasRequest(Callback successCallback, String clientId, String clientSecret, String encodedUrl) {
        if (oauth2_access_token == null || oauth2_token_validity < System.currentTimeMillis() / 1000) {
            setOAuth2AccessToken("client_credentials", clientId, clientSecret);
        }
        try {
            HttpURLConnection conn = (HttpURLConnection) new URL(encodedUrl).openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Authorization", oauth2_token_type + " " + oauth2_access_token);
            StringBuilder responseStrBuilder = new StringBuilder();
            String res = "";
            JSONObject jsonResponse = null;
            WritableMap finalResponse = null;
            BufferedReader reader = null;
            try {
                InputStream in = new BufferedInputStream(conn.getInputStream());
                reader = new BufferedReader(new InputStreamReader(in, "UTF-8"));
                String line = "";
                while ((line = reader.readLine()) != null) {
                    responseStrBuilder.append(line);
                }
            } catch (Exception e) {
                e.printStackTrace();
                res = "error in inputstream reading";
            } finally {
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
            res = responseStrBuilder.toString();
            jsonResponse = new JSONObject(res);
            finalResponse = jsonToReact(jsonResponse);
            successCallback.invoke(finalResponse);
            return;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static WritableMap jsonToReact(JSONObject jsonObject) throws JSONException {
        WritableMap writableMap = Arguments.createMap();
        Iterator iterator = jsonObject.keys();
        while (iterator.hasNext()) {
            String key = (String) iterator.next();
            Object value = jsonObject.get(key);
            if (value instanceof Float || value instanceof Double) {
                writableMap.putDouble(key, jsonObject.getDouble(key));
            } else if (value instanceof Number) {
                writableMap.putInt(key, jsonObject.getInt(key));
            } else if (value instanceof String) {
                writableMap.putString(key, jsonObject.getString(key));
            } else if (value instanceof JSONObject) {
                writableMap.putMap(key, jsonToReact(jsonObject.getJSONObject(key)));
            } else if (value instanceof JSONArray) {
                writableMap.putArray(key, jsonToReact(jsonObject.getJSONArray(key)));
            } else if (value == JSONObject.NULL) {
                writableMap.putNull(key);
            }
        }
        return writableMap;
    }

    public static WritableArray jsonToReact(JSONArray jsonArray) throws JSONException {
        WritableArray writableArray = Arguments.createArray();
        for (int i = 0; i < jsonArray.length(); i++) {
            Object value = jsonArray.get(i);
            if (value instanceof Float || value instanceof Double) {
                writableArray.pushDouble(jsonArray.getDouble(i));
            } else if (value instanceof Number) {
                writableArray.pushInt(jsonArray.getInt(i));
            } else if (value instanceof String) {
                writableArray.pushString(jsonArray.getString(i));
            } else if (value instanceof JSONObject) {
                writableArray.pushMap(jsonToReact(jsonArray.getJSONObject(i)));
            } else if (value instanceof JSONArray) {
                writableArray.pushArray(jsonToReact(jsonArray.getJSONArray(i)));
            } else if (value == JSONObject.NULL) {
                writableArray.pushNull();
            }
        }
        return writableArray;
    }
}
